#Dev by Ender Loc Phan
<#Requirements:
    Powershell 4.0 
    Import-Module ActiveDirectory
#>
<#
.Synopsis
   Pentesting tool in windows
   
   Checking for: 
       + None-Delegated Kerberos Accounts
       + Delegated Kerberos Accounts.
       + NTML 
       + NTML audit
       + LSA
       + Wdigest
       + SMB/SMB signing 
       

.DESCRIPTION

.LINK
    https://github.com/enderphan94/Windows-pentest_01
#>
$domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
$computer = $($env:COMPUTERNAME)
Write-host "`nPENTESTING ON" -ForegroundColor Cyan
write-host "Domain: $($domain.name)" -ForegroundColor Cyan
Write-Host "Computer: $computer`n" -ForegroundColor Cyan
function main{
    param(
    [String]$genres,
    [String]$name,
    [switch]$lsa,
    [switch]$wdigest,
    [switch]$smb
    )
    [xml]$xml = Get-GPOReport -all -ReportType Xml

    $arra_lsa =  New-Object System.Collections.ArrayList
    $arra_ntml = New-Object System.Collections.ArrayList
    foreach($GPO in @($xml.GPOS.GPO)){
        if($lsa -ne $true){
            $checkntlm = $GPO.computer.ExtensionData.Extension.SecurityOptions.Display|select @{Name="GPO";Expression={$GPO.Name}}, Name, DisplayString,DisplayBoolean| ? {$_.Name -match "^$($genres):"} 
            $arra_ntml.Add($checkntlm)|Out-Null
        }
        else{

            $checklsa = $GPO.computer.ExtensionData.Extension.SecurityOptions|select @{Name="GPO";Expression={$GPO.Name}}, KeyName,SettingNumber |? {$_.KeyName -match "RunAsPPL"} |Format-Table
            $arra_lsa.Add($checklsa)|Out-Null
        }
        if($smb -eq $true){
            
            $GPO.computer.ExtensionData.Extension.SecurityOptions.Display|`
             select @{Name="GPO";Expression={$GPO.Name}}, Name,DisplayBoolean |? {($_.Name -match "Microsoft network server") -or ($_.Name -match "Microsoft network client")}  
        }
    }
    
    if($arra_ntml -eq ""){
         Write-Host "$name isn't enabled" -ForegroundColor Gray    
    }else{
        $arra_ntml
    }


    if($lsa -eq $true){
        if ($arra_lsa -eq ""){
            Write-Host "LSA isn't enabled" -ForegroundColor Gray
        }
        else{
            Write-Host "LSA is enabled" -ForegroundColor Gray
            $arra_lsa
        }
    }

    if($wdigest -eq $true){

        $digest= Get-ItemProperty "hklm:\SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest\"
        if($digest.UseLogonCredential -eq $null){
  
            Write-Host "Wdigest Authentication isn't enabled" -ForegroundColor gray
        }
        else{
            Write-Host "Wdigest Authentication is enabled" -ForegroundColor gray        
        }
    }
    
}
function kbr{

    #List of Delegated accounts, which includes user, computer accounts 

  
[string]$DN = (Get-ADDomain).DistinguishedName

 
$SERVER_TRUST_ACCOUNT = 0x2000
$TRUSTED_FOR_DELEGATION = 0x80000
$TRUSTED_TO_AUTH_FOR_DELEGATION= 0x1000000
$PARTIAL_SECRETS_ACCOUNT = 0x4000000  
$bitmask = $TRUSTED_FOR_DELEGATION -bor $TRUSTED_TO_AUTH_FOR_DELEGATION -bor $PARTIAL_SECRETS_ACCOUNT
 
# LDAP filter to find all accounts having some form of delegation.
# 1.2.840.113556.1.4.804 is an OR query. 
$filter = @"
(&
  (servicePrincipalname=*)
  (|
    (msDS-AllowedToActOnBehalfOfOtherIdentity=*)
    (msDS-AllowedToDelegateTo=*)
    (UserAccountControl:1.2.840.113556.1.4.804:=$bitmask)
  )
  (|
    (objectcategory=computer)
    (objectcategory=person)
    (objectcategory=msDS-GroupManagedServiceAccount)
    (objectcategory=msDS-ManagedServiceAccount
    )
  )
)
"@ -replace "[\s\n]", ''
<#

    #>
$propertylist = @(
    "servicePrincipalname", 
    "useraccountcontrol", 
    "samaccountname", 
    "msDS-AllowedToDelegateTo", 
    "msDS-AllowedToActOnBehalfOfOtherIdentity"
)
Get-ADObject -LDAPFilter $filter -SearchBase $DN -SearchScope Subtree -Properties $propertylist -PipelineVariable account | ForEach-Object {
    $isDC = ($account.useraccountcontrol -band $SERVER_TRUST_ACCOUNT) -ne 0
    $fullDelegation = ($account.useraccountcontrol -band $TRUSTED_FOR_DELEGATION) -ne 0
    $constrainedDelegation = ($account.'msDS-AllowedToDelegateTo').count -gt 0
    $isRODC = ($account.useraccountcontrol -band $PARTIAL_SECRETS_ACCOUNT) -ne 0
    $resourceDelegation = $account.'msDS-AllowedToActOnBehalfOfOtherIdentity' -ne $null
     
    $comment = "" 
    if ((-not $isDC) -and $fullDelegation) { 
        $comment += "WARNING: full delegation to non-DC is not recommended!; " 
    }
    if ($isRODC) { 
        $comment += "WARNING: investigation needed if this is not a real RODC; " 
    }
    if ($resourceDelegation) { 
        # to count it using PS, we need the object type to select the correct function... broken, but there we are. 
        $comment += "INFO: Account allows delegation FROM other server(s); " 
    }
    if ($constrainedDelegation) { 
        $comment += "INFO: constrained delegation service count: $(($account.'msDS-AllowedToDelegateTo').count); " 
    }
 
    [PSCustomobject] @{
        samaccountname = $account.samaccountname
        objectClass = $account.objectclass        
        uac = ('{0:x}' -f $account.useraccountcontrol)
        isDC = $isDC
        isRODC = $isRODC
        fullDelegation = $fullDelegation
        constrainedDelegation = $constrainedDelegation
        resourceDelegation = $resourceDelegation
        comment = $comment
    }
} 

}

Function none_delega{

  #  $domain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
    $ADSearch = New-Object System.DirectoryServices.DirectorySearcher
    $ADSearch.SearchRoot ="LDAP://$Domain"
    $ADSearch.SearchScope = "subtree"
    $ADSearch.PageSize = 100
    $ADSearch.Filter = "(objectClass=user)"
    $properies =@(
    "sAMAccountName",
    "userAccountControl",
    "Description"
    )

    foreach($pro in $properies)
    {
        $ADSearch.PropertiesToLoad.add($pro)|out-null
    }

    $userObjects = $ADSearch.FindAll()
    $count = 0
    foreach($user in $userObjects){
        
        $sam = $user.Properties.Item("sAMAccountName")[0]
        $accountDis= $user.Properties.Item("userAccountControl")[0]
        $Description = $user.Properties.item("Description")[0]
        
        if($accountDis -band 0x10000){   
            [PSCustomobject] @{
                samaAccountName = $sam
                Description = $Description
                UserAccountControl = $accountDis
            }
            $count++
        }
    }
    Write-Host "Total of accounts has none-delegation: $count`n" -ForegroundColor Red

}
write-host "- Kerberos Delegated Accounts `n"-ForegroundColor Green 
kbr
Write-Host "Kerberos None-Delegated Accounts `n" -ForegroundColor Green
none_delega
Write-Host "- NTML`n" -ForegroundColor Green
main -genres "Network security" -name "NTML"
Write-Host
Write-Host "- NTML Audit`n" -ForegroundColor Green
main -genres "Audit" -name "NTML Audit"
Write-Host
Write-Host "- LSA" -ForegroundColor Green 
main -genres "Audit" -lsa $true
Write-Host
Write-Host "- Wdigest Authentication" -ForegroundColor Green 
main  -wdigest $true
Write-Host
Write-Host "- SMB/SMb signing`n" -ForegroundColor Green 
main -smb $true
